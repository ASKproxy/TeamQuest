package com.example.matchquest.View.RequestStatus;

import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;

import se.emilsjolander.stickylistheaders.ExpandableStickyListHeadersListView;
import se.emilsjolander.stickylistheaders.StickyListHeadersAdapter;
import se.emilsjolander.stickylistheaders.StickyListHeadersListView;

import com.example.matchquest.R;
import com.example.matchquest.DataManipulation.DrawerLayout.DrawerLayoutDM;
import com.example.matchquest.DataManipulation.RequestStatus.RequestStatusDM;
import com.example.matchquest.View.Drawerlayout.MatchStatusAdpter;
import com.example.matchquest.common.TeamQuestConstants;
import com.example.matchquest.model.MatchStatus;
import com.example.matchquest.model.RequestStatus;
import com.example.matchquest.model.Team;
import com.nineoldandroids.animation.Animator;
import com.nineoldandroids.animation.ValueAnimator;

import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

public class RequestStatusActivity extends ActionBarActivity{
	
	RecyclerView requestStatusRecyclerView;
	
	RequestStatusAdapter requestStatusAdapter;
	
	Map<Long,RequestStatus> requestStatusMap;
	
	TextView emptyView;
	
	 WeakHashMap<View,Integer> mOriginalViewHeightPool = new WeakHashMap<View, Integer>();
	
	Team team;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.sticky_header_layout);
		
		team = (Team) getIntent().getSerializableExtra(TeamQuestConstants.team_key);
		
		 	getSupportActionBar().setTitle(team.getTeamName());
	        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
			getSupportActionBar().setHomeButtonEnabled(true);
			
			RequestStatusDM requestStatusDetails = new RequestStatusDM();
			
			requestStatusMap = requestStatusDetails.getRequestStatusDetails(team);
			
			final ExpandableStickyListHeadersListView expandableStickyList = (ExpandableStickyListHeadersListView) findViewById(R.id.list);
//			StickyListHeadersAdapter adapter = new MyAdapter(this);
			requestStatusAdapter = new RequestStatusAdapter(this, requestStatusDetails.getRequestStatusChildList(), requestStatusMap);
			
			expandableStickyList.setAnimExecutor(new AnimationExecutor());
			expandableStickyList.setAdapter(requestStatusAdapter);
			expandableStickyList.setOnHeaderClickListener(new StickyListHeadersListView.OnHeaderClickListener() {
			            @Override
			            public void onHeaderClick(StickyListHeadersListView l, View header, int itemPosition, long headerId, boolean currentlySticky) {
			                if(expandableStickyList.isHeaderCollapsed(headerId)){
			                    expandableStickyList.expand(headerId);
			                }else {
			                    expandableStickyList.collapse(headerId);
			                }
			            }

						
			        });
	}
	
	class AnimationExecutor implements ExpandableStickyListHeadersListView.IAnimationExecutor {

        @Override
        public void executeAnim(final View target, final int animType) {
            if(ExpandableStickyListHeadersListView.ANIMATION_EXPAND==animType&&target.getVisibility()==View.VISIBLE){
                return;
            }
            if(ExpandableStickyListHeadersListView.ANIMATION_COLLAPSE==animType&&target.getVisibility()!=View.VISIBLE){
                return;
            }
            if(mOriginalViewHeightPool.get(target)==null){
                mOriginalViewHeightPool.put(target,target.getHeight());
            }
            final int viewHeight = mOriginalViewHeightPool.get(target);
            float animStartY = animType == ExpandableStickyListHeadersListView.ANIMATION_EXPAND ? 0f : viewHeight;
            float animEndY = animType == ExpandableStickyListHeadersListView.ANIMATION_EXPAND ? viewHeight : 0f;
            final ViewGroup.LayoutParams lp = target.getLayoutParams();
            ValueAnimator animator = ValueAnimator.ofFloat(animStartY, animEndY);
            animator.setDuration(200);
            target.setVisibility(View.VISIBLE);
            animator.addListener(new Animator.AnimatorListener() {
                @Override
                public void onAnimationStart(Animator animator) {
                }

                @Override
                public void onAnimationEnd(Animator animator) {
                    if (animType == ExpandableStickyListHeadersListView.ANIMATION_EXPAND) {
                        target.setVisibility(View.VISIBLE);
                    } else {
                        target.setVisibility(View.GONE);
                    }
                    target.getLayoutParams().height = viewHeight;
                }

                @Override
                public void onAnimationCancel(Animator animator) {

                }

                @Override
                public void onAnimationRepeat(Animator animator) {

                }
            });
            animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                @Override
                public void onAnimationUpdate(ValueAnimator valueAnimator) {
                    lp.height = ((Float) valueAnimator.getAnimatedValue()).intValue();
                    target.setLayoutParams(lp);
                    target.requestLayout();
                }
            });
            animator.start();

        }
    }

}
